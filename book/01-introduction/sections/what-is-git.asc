=== Git Nedir?

Özetle, Git nedir?
Bu, özümsemesi gerekli ve önemli olan bir bölümdür. Çünkü eğer Git'in ne olduğunu, temellerini ve nasıl çalıştığını iyi anlarsanız, Git'i etkili bir şekilde kullanmak da muhtemelen sizin için çok daha kolay olacaktır.
Git'i öğrenirken, mümkün olduğunca diğer Versiyon Kontrol Sistemleri'nden (CVS, Subversion veya Perforce gibi) bildiklerinizi aklınızdan çıkarmaya gayret edin ki Git'i daha berrak ve doğru şekilde öğrenip kullanabilesiniz.
Git'in kullanıcı arayüzü diğer Versiyon Kontrol Sistemleri'ne epey benzese de Git bilgileri diğerlerinden çok daha farklı bir şekilde depolar ve bu bilgiler hakkında daha farklı düşünür. Bu yüzden bunun gibi farklılıkları anlamak Git'i kullanırken kafanızın karışmasını engeller.((Subversion))((Perforce))

==== Farklılıklar Değil, Anlık Görünümler

Git'in diğer herhangi bir VKS'den (Subversion ve benzerleri dahil olmak üzere) en büyük farkı, Git'in veriler hakkında düşünme şeklidir.
Diğer çoğu sistem bilgileri dosya-bazlı değişim listesi şeklinde saklar.
Bu diğer sistemler (CVS, Subversion, Perforce, Bazaar vd.) bilgileri dosya setleri ve o dosyalara zaman içinde yapılan değişiklikler şeklinde saklar. (Bu genellikle _delta-bazlı_ versiyon kontrol şeklinde tanımlanır)

.Verileri her dosyanın baz versiyonunu referans alarak, yapılan değişiklikler şeklinde saklamak.
image::images/deltas.png[Verileri her dosyanın baz versiyonunu referans alarak, yapılan değişiklikler şeklinde saklamak.]

Git, verileri hakkında bu şekilde düşünmez ve onları bu şekilde saklamaz.
Bunun yerine Git, verilerini daha çok minyatür dosya sistemlerinin anlık görünümler serisi şeklinde düşünür ve o şekilde saklar.
Git'le her commit yaptığınızda ya da projenizin durumunu kaydettiğinizde, Git kısaca tüm dosyalarınızın o an nasıl göründüğünün fotoğrafını çeker ve o anlık görünümün referansını saklar.
Verimli olmak adına, eğer dosyalar değişmemişse Git o dosyaları tekrar saklamaz, onun yerine o dosyaların halihazırda saklandığı referansa bağlantı verir.
Yani Git, verilerini daha çok *anlık görünüm akışı* olarak görür.

.Veriyi projenin anlık görünümleri olarak saklamak.
image::images/snapshots.png[Git zaman geçtikçe veriyi projenin anlık görünümleri olarak saklar.]

Bu Git ve neredeyse diğer tüm VKS'lerinin arasındaki en büyük ayrımdır.
Bu da Git'i, diğer sistemlerin kendilerinden önceki jenerasyondan kopyaladıkları versiyon kontrolünün her yönünü yeniden değerlendirmesini sağlar.
Böylelikle Git, basit bir VKS'dense, inanılmaz güçlü araçlarla donatılmış minyatür bir dosya sistemi olmuştur.
Git'deki dallanmayı anlatırken verileriniz hakkında bu şekilde düşünmenin getirilerini keşfedeceğiz. <<ch03-git-branching#ch03-git-branching>>

==== Neredeyse Her İşlem Yereldir

Git'deki çoğu işlem çalışmak için yalnızca yerel dosyalara ve kaynaklara ihtiyaç duyar. Genel olarak başka bir bilgisayardan sizin ağınıza bilgi gelmesine ihtiyacınız yoktur.
Eğer çoğu işlemin ağ gecikme yüküne sahip olduğu bir MVKS'ye (Merkezî Versiyon Kontrol Sistemi) alışkınsanız, Git'in bu yönü size, Hız Tanrı'larının Git'i, ilahi ve tanrısal güçlerle kutsadığını düşündürecektir.
Çünkü projenizin tüm tarihi tam olarak yerel diskinizdedir, ve çoğu işlem de neredeyse anında gerçekleşir.

For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you -- it simply reads it directly from your local database.
This means you see the project history almost instantly.
If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.

This also means that there is very little you can't do if you're offline or off VPN.
If you get on an airplane or a train and want to do a little work, you can commit happily (to your _local_ copy, remember?) until you get to a network connection to upload.
If you go home and can't get your VPN client working properly, you can still work.
In many other systems, doing so is either impossible or painful.
In Perforce, for example, you can't do much when you aren't connected to the server; in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
This may not seem like a huge deal, but you may be surprised what a big difference it can make.

==== Git Has Integrity

Everything in Git is checksummed before it is stored and is then referred to by that checksum.
This means it's impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy.
You can't lose information in transit or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
A SHA-1 hash looks something like this:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

You will see these hash values all over the place in Git because it uses them so much.
In fact, Git stores everything in its database not by file name but by the hash value of its contents.

==== Git Generally Only Adds Data

When you do actions in Git, nearly all of them only _add_ data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As with any VCS, you can lose or mess up changes you haven't committed yet, but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.

This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<ch02-git-basics#_undoing>>.

==== The Three States

Pay attention now -- here is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: _modified_, _staged_, and _committed_:

* Modified means that you have changed the file but have not committed it to your database yet.
* Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
* Committed means that the data is safely stored in your local database.

This leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.

.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

The working tree is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
Its technical name in Git parlance is the ``index'', but the phrase ``staging area'' works just as well.

The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you _clone_ a repository from another computer.

The basic Git workflow goes something like this:

1. You modify files in your working tree.
2. You selectively stage just those changes you want to be part of your next commit, which adds _only_ those changes to the staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered _committed_.
If it has been modified and was added to the staging area, it is _staged_.
And if it was changed since it was checked out but has not been staged, it is _modified_.
In <<ch02-git-basics#ch02-git-basics>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
