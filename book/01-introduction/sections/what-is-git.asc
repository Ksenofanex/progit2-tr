=== Git Nedir?

Özetle, Git nedir?
Bu, özümsemesi gerekli ve önemli olan bir bölümdür. Çünkü eğer Git'in ne olduğunu, temellerini ve nasıl çalıştığını iyi anlarsanız, Git'i etkili bir şekilde kullanmak da muhtemelen sizin için çok daha kolay olacaktır.
Git'i öğrenirken, mümkün olduğunca diğer Versiyon Kontrol Sistemleri'nden (CVS, Subversion veya Perforce gibi) bildiklerinizi aklınızdan çıkarmaya gayret edin ki Git'i daha berrak ve doğru şekilde öğrenip kullanabilesiniz.
Git'in kullanıcı arayüzü diğer Versiyon Kontrol Sistemleri'ne epey benzese de Git bilgileri diğerlerinden çok daha farklı bir şekilde depolar ve bu bilgiler hakkında daha farklı düşünür. Bu yüzden bunun gibi farklılıkları anlamak Git'i kullanırken kafanızın karışmasını engeller.((Subversion))((Perforce))

==== Farklılıklar Değil, Anlık Görünümler

Git'in diğer herhangi bir VKS'den (Subversion ve benzerleri dahil olmak üzere) en büyük farkı, Git'in veriler hakkında düşünme şeklidir.
Diğer çoğu sistem bilgileri dosya-bazlı değişim listesi şeklinde saklar.
Bu diğer sistemler (CVS, Subversion, Perforce, Bazaar vd.) bilgileri dosya setleri ve o dosyalara zaman içinde yapılan değişiklikler şeklinde saklar. (Bu genellikle _delta-bazlı_ versiyon kontrol şeklinde tanımlanır)

.Verileri her dosyanın baz versiyonunu referans alarak, yapılan değişiklikler şeklinde saklamak.
image::images/deltas.png[Verileri her dosyanın baz versiyonunu referans alarak, yapılan değişiklikler şeklinde saklamak.]

Git, verileri hakkında bu şekilde düşünmez ve onları bu şekilde saklamaz.
Bunun yerine Git, verilerini daha çok minyatür dosya sistemlerinin anlık görünümler serisi şeklinde düşünür ve o şekilde saklar.
Git'le her commit yaptığınızda ya da projenizin durumunu kaydettiğinizde, Git kısaca tüm dosyalarınızın o an nasıl göründüğünün fotoğrafını çeker ve o anlık görünümün referansını saklar.
Verimli olmak adına, eğer dosyalar değişmemişse Git o dosyaları tekrar saklamaz, onun yerine o dosyaların halihazırda saklandığı referansa bağlantı verir.
Yani Git, verilerini daha çok *anlık görünüm akışı* olarak görür.

.Veriyi projenin anlık görünümleri olarak saklamak.
image::images/snapshots.png[Git zaman geçtikçe veriyi projenin anlık görünümleri olarak saklar.]

Bu Git ve neredeyse diğer tüm VKS'lerinin arasındaki en büyük ayrımdır.
Bu da Git'i, diğer sistemlerin kendilerinden önceki jenerasyondan kopyaladıkları versiyon kontrolünün her yönünü yeniden değerlendirmesini sağlar.
Böylelikle Git, basit bir VKS'dense, inanılmaz güçlü araçlarla donatılmış minyatür bir dosya sistemi olmuştur.
Git'deki dallanmayı anlatırken verileriniz hakkında bu şekilde düşünmenin getirilerini keşfedeceğiz. <<ch03-git-branching#ch03-git-branching>>

==== Neredeyse Her İşlem Yereldir

Git'deki çoğu işlem çalışmak için yalnızca yerel dosyalara ve kaynaklara ihtiyaç duyar. Genel olarak başka bir bilgisayardan sizin ağınıza bilgi gelmesine ihtiyacınız yoktur.
Eğer çoğu işlemin ağ gecikme yüküne sahip olduğu bir MVKS'ye (Merkezî Versiyon Kontrol Sistemi) alışkınsanız, Git'in bu yönü size, Hız Tanrıları'nın Git'i, ilahi ve tanrısal güçlerle kutsadığını düşündürecektir.
Çünkü projenizin tüm tarihçesi tam olarak yerel diskinizdedir, ve çoğu işlem de neredeyse anında gerçekleşir.

Örneğin, projenin tarihçesine göz atmak için Git'in sunucuya girip, tarihçeye erişip size göstermesine gerek yoktur, onun yerine hızlıca sizin yerel veritabanınızdan okur.
Bu da proje tarihçesini neredeyse anında görebildiğiniz anlamına gelir.
Eğer bir dosyanın mevcut sürümü ve bir ay önceki sürümü arasındaki değişiklikleri görmek isterseniz, Git, uzaktaki bir sunucuya bu işlemi yapması için başvurmak ya da dosyanın eski versiyonunu uzaktaki sunucudan çekip yerel diskte hesaplamak yerine, dosyanın bir ay önceki haline hızlıca göz atıp yerel bir farklılık hesaplaması yapar.

Bu da çevrim dışı ya da VPN'sizseniz bile yapamayacağınız sadece çok az şey olduğunu belirtir.
Eğer uçakla ya da trenle seyahet ediyorken biraz çalışmak isterseniz, yerel ortamınızda çalışıp commitleyebilir (_yerel_ kopyanıza) ve internet bağlantısı edindiğinizde de onu internete yükleyebilirsiniz.
Eğer eve giderseniz ve VPN istemciniz düzgün bir şekilde çalışmazsa bile hâlâ yerel ortamınızda çalışabilirsiniz.
Diğer çoğu sistemde ise bunları yapmak ya imkânsız ya da çok sancılıdır.
Örneğin Perforce'de, eğer sunucuya bağlı değilseniz pek bir şey yapamazsınız. Subversion ve CVS'de ise dosyaları düzenleyebilir ama sunucuya commitleyemezsiniz. (Çünkü sunucunuz çevrim dışı)
Bu size şu an çok da önemli bir özellikmiş gibi gelmeyebilir ama Git'i öğrendikçe ve kullandıkça bunun ne kadar büyük bir fayda sağladığını bizzat göreceksiniz.

==== Git'in Entegrasyonu Vardır

Git'deki her şey saklanmadan önce sağlaması yapılır ve ondan sonra da o sağlamayla referans gösterilir.
Bu da dosyaların ya da klasörlerin içeriğini Git'in haberi olmadan değiştirmenin imkânsız olduğu anlamına gelir.
Bu işlev Git'in temelinde gömülü halde gelir ve Git'in felsefesinin ayrılmaz bir parçasıdır.
Aktarım yaparken bilgi kaybetmezsiniz. Aynı şekilde Git farkına varmadan bir dosya da bozulmaz.

Git'in sağlama yapmak için kullandığı bu mekanizmanın adı SHA-A özetidir.(((SHA-1)))
Bu, on altılık karakterlerden (0-9 ve a–f) oluşan ve Git'teki bir dosya veya dizin yapısının içeriğine göre hesaplanan 40 karakterlik bir karakter dizisidir.
Bir SHA-1 özeti şuna benzer:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Bu özet değerlerini Git'in çoğu yerinde göreceksiniz çünkü Git onu sık sık kullanır.
Hatta Git, sunucusundaki her şeyi dosya isimleriyle değil, içeriklerinin özet değeriyle saklar.

==== Git Genel Olarak Sadece Veri Ekler

Git'de bir şeyler yaptığınızda neredeyse hepsi sadece Git'in veritabanına veri _ekler_.
Sistemin geri alınamayan bir şey yapmasını veya verileri herhangi bir şekilde silmesini sağlamak zordur.
Tüm VCS'lerde olduğu gibi, henüz commitlemediğiniz değişiklikleri kaybedebilir veya karman çorman yapabilirsiniz, ancak Git'e bir anlık görünüm verdikten sonra, özellikle veritabanınızı düzenli olarak başka bir repository'e yollarsanız, kaybetmek çok zordur.
Bu da Git'i kullanmayı keyifli kılar çünkü ortalığı batırma tehlikesi olmadan istediğimiz gibi denemeler yapabileceğimizi biliriz.
Git'in verilerini nasıl sakladığını ve kaybolmuş görünen dosyaları nasıl geri alabileceğinizi daha detaylı bir şekilde öğrenmek için: <<ch02-git-basics#_undoing>>

==== The Three States

Pay attention now -- here is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: _modified_, _staged_, and _committed_:

* Modified means that you have changed the file but have not committed it to your database yet.
* Staged means that you have marked a modified file in its current version to go into your next commit snapshot.
* Committed means that the data is safely stored in your local database.

This leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.

.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

The working tree is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
Its technical name in Git parlance is the ``index'', but the phrase ``staging area'' works just as well.

The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you _clone_ a repository from another computer.

The basic Git workflow goes something like this:

1. You modify files in your working tree.
2. You selectively stage just those changes you want to be part of your next commit, which adds _only_ those changes to the staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered _committed_.
If it has been modified and was added to the staging area, it is _staged_.
And if it was changed since it was checked out but has not been staged, it is _modified_.
In <<ch02-git-basics#ch02-git-basics>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
